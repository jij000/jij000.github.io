<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>https://jij000.github.io/post.html</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jij000.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker</title>
      <link>https://jij000.github.io/post/docker.html</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/docker.html</guid>
      <description>常用命令 docker pull nginx # 拉取镜像docker run -d -p 8080:80 nginx # 运行容器, -d 后台运行, -p 主机端口 : 容器端口 做映射docker run -d -P nginx # 运行容器, -d 后台运行, -P 容器的所有端口和主机随机的端口映射, docker ps 可以看到映射的情况docker images # 查看现有镜像docker ps # 查看正在运行的容器docker run --help # 查看帮助docker exec --help # 进入容器内部docker exec -it 03 bash # 进入容器内部, 打开一个容器终端, 03是容器id的开头部分exit # 退出容器终端docker stop 1f #关闭容器docker restart 1f #重启容器which nginx # 查找nginx的安装位置netstat -na|grep 8888 # 查找端口状态uname -a # 查看系统版本制作镜像 Dockerfile</description>
    </item>
    
    <item>
      <title>Hibernate</title>
      <link>https://jij000.github.io/post/hibernate.html</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/hibernate.html</guid>
      <description>Transaction isolation levels https://www.geeksforgeeks.org/transaction-isolation-levels-dbms/ A transaction isolation level is defined by the following phenomena –
 Dirty Read – A Dirty read is the situation when a transaction reads a data that has not yet been committed. For example, Let’s say transaction 1 updates a row and leaves it uncommitted, meanwhile, Transaction 2 reads the updated row. If transaction 1 rolls back the change, transaction 2 will have read data that is considered never to have existed.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://jij000.github.io/post/kubernetes.html</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/kubernetes.html</guid>
      <description>详细教程
架构图 kubectl 命令行控制工具
etcd key value 数据库, 存储集群所有重要配置信息(持久化)
api server 所有服务的统一访问入口
ControllerManager 维持副本期望数
Scheduler 负责接受任务, 选择合适节点进行分配任务
kubelet 直接跟容器引擎交互, 实现容器的生命周期管理
kube-proxy 负责写入规则至 IPTABLES, IPVS实现服务映射访问
Pod 运行容器, 可运行多个 所有Pod在一个可直接连通的扁平的网络空间中
 自主式Pod 控制器管理的Pod  其他插件 CoreDNS 可以为集群中的SVC创建一个域名IP的对应关系解析
Dashboard 给K8S集群一个B/S访问体系
INGRESS 官方只能实现四层代理, INGRESS实现七层代理
FEDETATION 跨集群中心, 多K8S统一管理
Prometheus K8S集群监控
ELK K8S集群日志统一分析接入平台</description>
    </item>
    
    <item>
      <title>AWS</title>
      <link>https://jij000.github.io/post/aws.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/aws.html</guid>
      <description>EC2 虚拟主机
S3 存储
Lambda 函数计算服务, 无状态</description>
    </item>
    
    <item>
      <title>Java Core</title>
      <link>https://jij000.github.io/post/java-core.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/java-core.html</guid>
      <description>Java 多线程 异常处理 BIO,NIO,AIO 有什么区别?  BIO (Blocking I/O): 同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。 NIO (New I/O): NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发 AIO (Asynchronous I/O): AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。  深拷贝 vs 浅拷贝  浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。 深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。   </description>
    </item>
    
    <item>
      <title>New features in Java 8</title>
      <link>https://jij000.github.io/post/new-features-in-java8.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jij000.github.io/post/new-features-in-java8.html</guid>
      <description>Lambda 表达式 Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。
方法引用 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。
默认方法 默认方法就是一个在接口里面有了一个实现的方法。
Stream API 新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。
Date Time API 加强对日期与时间的处理。
Optional 类 Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。
新工具 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。
Nashorn, JavaScript 引擎 Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</description>
    </item>
    
  </channel>
</rss>